//React-library-lodash.debounce\\

/\/\/\/\/\/\/\/\/\/\/\/\
//№1 src/redux
1. Добавить ещё два глобальных состояния [search, pagination] 
/\/\/\/\/\/\/\/\/\/\/\/\

/\/\/\/\/\/\/\/\/\/\/\/\
//№2 Home.jsx
1. Заменить fetch на axios.
2. Передать в компонент Pagination value в метод forcePage 
# react-paginate считает по индексу [0,1..] по этому передать значение и отбавить у элемента 1.
/\/\/\/\/\/\/\/\/\/\/\/\

/\/\/\/\/\/\/\/\/\/\/\/\
//№3 Search.jsx
1. Клик на крестик поля поиска очищать содержимое поля и наводить фокус на поле.
#Первое: Отоброжать svg крестик только когда в поле есть текст.  
#Второе: Обращаться к поля через референс.
2. Создать 2 состояния , 
#Первое: Для отрисовки введёного в инпут поля текст,
#Второе: Устранить перерисовку функции для отправки на сервер поля search,
#Состояние для отправки на сервер с задержкой через debounce.
/\/\/\/\/\/\/\/\/\/\/\/\

##Helper
//Используем: [useRef,useCallback,debounce,focus,redux]

#useCallback - Создаётся при первом рендере и больше пересоздоваться не будет.

#useRef возвращает изменяемый ref-объект, свойство .current которого инициализируется переданным аргументом (initialValue).
#Возвращённый объект будет сохраняться в течение всего времени жизни компонента.