//Props Drilling\\
//№1 App.jsx
1. Состояние компонента <Search /> вынести в App и передать его по дом дереву.
1.1 App => Header => Search
1.2 App => Home 

//№2 Header.jsx
1. Передать пропсы дальше в Search

//№3 Search.jsx: 
1. Получить пропсы
2. input сделать управляемым

//№4 Home.jsx: 
# Первая часть
1. Получить пропс только значение поля search
2. Перенести состояния sort & category и передать их в компоненты
2. В колбек функцию передавать i элемента
3. sort изначально передать объект name , sortPropery 
//Сделать фильтрацию по массиву данным(поиск title) ,через поиск находить по имени нужную пиццу
2. Обратится к массиву данных ,отфилтровать новый массив
3. Условие: значение поле title преобразовать в нижний регистр ,находить повторяющиеся значение
3. поля search и приводить в нижний регистр
3. Если находит повторное значение true , иначе false
3. Добавить map и отрисовать пиццы 
# Вторая часть
//QueryParams в useEffect создать 3 перемнные с QueryParams
1. categoryQuery: category больше 0 тогда category={индекс выбранной категории} иначе ''
2. sortQuery: sortBy={найти у значения sortProperty '-' и убирать его на пустую строку ''}
3. orderQuery: order={находить у sortProperty '-'} если true 'asc' иначе 'desc'
4. По очередности добавить в Url QueryParams
5. В начале запроса на сервер ,передовать в загрузку true

//№5 Sort.jsx
1. Раскомментировать SORT_LIST и получить пропсы sort из Home
2. Где отображается выбранная категория ,обращаться к sort полу имя
3. Отрисовка списка className обращаться к значениям sortProperty
4. Передовать в функцию handler значения всего объекта
5. Отображать новое имя

//№6 Categories.jsx
1. Получить пропсы и заменить 
##Helper
//Используем: [useState, Method: filter, replace, includes, Тернарник(? :) ]
P.S.
1. Метод filter() создаёт новый массив со всеми элементами, прошедшими проверку, 
1. задаваемую в передаваемой функции.
#Пример:
#function isBigEnough(value) {
#  return value >= 10;
#}
#let filtered = [12, 5, 8, 130, 44].filter(isBigEnough);
#массив filtered теперь содержит [12, 130, 44]

2. Метод includes() определяет, содержит ли массив определённый элемент, 
2. возвращая в зависимости от этого true или false.
#Пример:
#const arr = [10,15,5]
#arr.includes(15) // true
#arr.includes(4) // false

3. Метод replace() возвращает новую строку с некоторыми или всеми сопоставлениями с шаблоном, 
3. заменёнными на заменитель. Шаблон может быть строкой или регулярным выражением, а заменитель 
3. может быть строкой или функцией, вызываемой при каждом сопоставлении.
#Пример:
#str.replace(regexp|substr, newSubStr|function[, flags])