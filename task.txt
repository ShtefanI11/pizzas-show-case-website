//ReduxAsyncThunk\\

//№1 Header.jsx
1. Получить параметры ссылки из урла. [useLocation]
2. Написать условие отображение кнопки отображение коль во товара и цен. Строгое не равенсто делать, до тега Link

//№2 App.jsx
1. Перенести разметку в MainLayout ,создать главный роут который оборачивает другие роуты.Путь / элемент MainLayout.
Учитывать что главный Роут который оборавивает уже имеет / в начале, для других путей убрать начальный слешь.
2. Импортировать FullPizza и создать новый роут который будет отображать одну пицу по адресу pizza/1,2,3 и тд.

//№3 MainLayout.jsx
1. Перенести разметку в MainLayout и компонет Header из компонента App.jsx.
2. В контейнере content передовать дочерние элементы, для этого есть метод Outlet.

//№4 FullPizza.jsx
"Данные пока что хранить в useState()"
1. Вытощить из параметров ссылки id элемента [useParams]
2. Сделать внутри useEffecta функцию которая делает запрос на сервер и сразуже произвести деструктуризацию вытащить data.
3. Запрос ссылка та же что и получить все пиццы + id который мы достали из URL
4. Обработка ошибки try/catch в catch вывести ошибку в alert. После вызвать navigate и перевести на главную странницу
5. Вызвать функцию внутри useEffecta
6. Перед разметой создать условный рендер if (data) которые записали в наше состояние пусто вернуть строку 'загрузка'.
7. Отрисовать пиццу imageUrl, title, id , price.

//№5 PizzaBlock.jsx
1. Отрисовка всех пицц обернуть в Линк путь pizza + id, ключ нужно передовать родительскому элементу...
#############################################Helper#############################################

//Используем: [
  Outlet,
  useParams,
  useLocation,
  useEffect,
  useState,
  useNavigate
]